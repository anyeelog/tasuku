!function(){!async function(){try{const n="/api/tasks?id="+a(),s=await fetch(n),o=await s.json();t=o.tasks,e()}catch(t){console.log(t)}}();let t=[];function e(){if(function(){const t=document.querySelector("#tasks");for(;t.firstChild;)t.removeChild(t.firstChild)}(),0===t.length){const t=document.querySelector("#tasks"),e=document.createElement("LI");return e.textContent="There are no tasks",e.classList.add("no-tasks"),void t.appendChild(e)}const o={0:"Incompleted",1:"Completed"};t.forEach(c=>{const i=document.createElement("LI");i.dataset.taskId=c.id,i.classList.add("task");const d=document.createElement("DIV");d.classList.add("task-header");const r=document.createElement("H4");r.classList.add("task-name"),r.textContent=c.name,r.onclick=function(){console.log(c),function(t){const e=document.createElement("DIV");e.classList.add("modal"),e.innerHTML=`\n      <div class="form-container">\n        <p class="page-description">Edit task</p>\n        <p style="padding: 0 50px;">Don't worry! Enter your email address and we'll send you a reset link.</p>\n        <form class="form form-task">\n          <div class="camp">\n            <input type="text" name="task" id="task" placeholder="Task title" value="${t.name?t.name:""}">\n          </div>\n          <div class="camp">\n            <input type="text" name="task-description" id="task-description" placeholder="Task description" value="${t.description?t.description:""}">\n          </div>\n          <div class="options">\n            <input type="submit" class="submit-new-task" value="Edit task">\n            <button type="button" class="close-modal">Cancel</button>\n          </div>\n        </form>\n      </div>\n    `,setTimeout(()=>{document.querySelector(".form-container").classList.add("animate")},0),e.addEventListener("click",(function(a){if(a.preventDefault(),a.target.classList.contains("close-modal")&&e.remove(),a.target.classList.contains("submit-new-task")){const e=document.querySelector("#task").value.trim(),a=document.querySelector("#task-description").value.trim();if(""===e)return void n("Task name is required","error",document.querySelector(".options"));t.name=e,t.description=a,s(t)}})),document.querySelector("body").appendChild(e)}({...c})};const l=document.createElement("P");l.classList.add("task-description"),c.description?l.textContent=c.description:l.textContent="(No description)";const p=document.createElement("DIV");p.classList.add("task-footer");const u=document.createElement("P");u.classList.add("task-status"),u.classList.add(""+o[c.status].toLowerCase()),u.textContent=o[c.status],u.dataset.statusTask=c.status;const m=document.createElement("BUTTON");m.classList.add("toggle-task"),m.dataset.idTask=c.id,m.textContent="Complete Task",m.onclick=function(){!function(t){const e="1"===t.status?"0":"1";t.status=e,s(t)}({...c})};const k=document.createElement("IMG");k.setAttribute("src","https://img.icons8.com/?size=512&id=G3ke6AwujrRv&format=png"),k.setAttribute("height","32px"),k.setAttribute("alt","Delete button");const f=document.createElement("BUTTON");f.classList.add("delete-task"),f.dataset.idTask=c.id,f.onclick=function(){!function(n){Swal.fire({title:"Are you sure?",text:"You won't be able to revert this!",icon:"warning",showCancelButton:!0,confirmButtonColor:"#3085d6",cancelButtonColor:"#d33",confirmButtonText:"Yes, delete it!"}).then(s=>{s.isConfirmed&&async function(n){const{id:s,name:o,description:c,status:i}=n,d=new FormData;d.append("id",s),d.append("name",o),d.append("description",c),d.append("status",i),d.append("url",a());try{const s="http://localhost:3000/api/task/delete",a=await fetch(s,{method:"POST",body:d});(await a.json()).result&&(Swal.fire("Deleted!","The task has been deleted.","success"),t=t.filter(t=>t.id!==n.id),e())}catch(t){}}(n)})}({...c})},i.appendChild(d),i.appendChild(l),i.appendChild(p),d.appendChild(r),f.appendChild(k),d.appendChild(f),p.appendChild(m),p.appendChild(u);document.querySelector("#tasks").appendChild(i)})}function n(t,e,n){const s=document.querySelector(".alerts");s&&s.remove();const a=document.createElement("UL");a.classList.add("alerts"),a.innerHTML=`<li class="alert ${e}">${t}</li>`,n.parentElement.insertBefore(a,n)}async function s(n){const{id:s,name:o,description:c,status:i}=n,d=new FormData;d.append("id",s),d.append("name",o),d.append("description",c),d.append("status",i),d.append("url",a());try{const n="http://localhost:3000/api/task/update",a=await fetch(n,{method:"POST",body:d});if("success"===(await a.json()).response.type){const n=document.querySelector(".modal");n&&n.remove(),t=t.map(t=>(t.id===s&&(t.status=i,t.name=o,t.description=c),t)),e()}}catch(t){console.log(t)}}function a(){const t=new URLSearchParams(window.location.search);return Object.fromEntries(t.entries()).id}document.querySelector("#add-task").addEventListener("click",(function(){const s=document.createElement("DIV");s.classList.add("modal"),s.innerHTML='\n      <div class="form-container">\n        <p class="page-description">Add a new task</p>\n        <p style="padding: 0 50px;">Don\'t worry! Enter your email address and we\'ll send you a reset link.</p>\n        <form class="form form-task">\n          <div class="camp">\n            <input type="text" name="task" id="task" placeholder="Task title">\n          </div>\n          <div class="camp">\n            <input type="text" name="task-description" id="task-description" placeholder="Task description">\n          </div>\n          <div class="options">\n            <input type="submit" class="submit-new-task" value="Add task">\n            <button type="button" class="close-modal">Cancel</button>\n          </div>\n        </form>\n      </div>\n    ',setTimeout(()=>{document.querySelector(".form-container").classList.add("animate")},0),s.addEventListener("click",(function(o){if(o.preventDefault(),o.target.classList.contains("close-modal")&&s.remove(),o.target.classList.contains("submit-new-task")){const s=document.querySelector("#task").value.trim(),o=document.querySelector("#task-description").value.trim();if(""===s)return void n("Task name is required","error",document.querySelector(".options"));!async function(s,o){const c=new FormData;c.append("name",s),c.append("description",o),c.append("project_id",a());try{const a="http://localhost:3000/api/task",i=await fetch(a,{method:"POST",body:c}),d=await i.json();if(n(d.message,d.type,document.querySelector(".options")),"success"===d.type){document.querySelector(".modal").remove();const n={id:String(d.id),name:s,description:o,status:"0",project_id:d.project_id};t=[...t,n],e()}}catch(t){console.log(t)}}(s,o)}})),document.querySelector("body").appendChild(s)}))}();